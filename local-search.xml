<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用kubebuilder编写自己的MPI Operator</title>
    <link href="/2022/07/27/write-mpi-operator/"/>
    <url>/2022/07/27/write-mpi-operator/</url>
    
    <content type="html"><![CDATA[<p>上次篇文章总结了MPI Operator需要做的事情，以及手动部署的实践。我们既然都可以手动部署出worker了，干脆再进一步，将该过程用代码实现，写一个MPI Operator。<a href="https://github.com/FFFFFaraway/MPI-Operator">Github</a></p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>目前的MPI Operator还存在哪些不足？</p><ol><li>代码较多。大概4000+行，本身属于kubeflow子项目，存在较多kubeflow依赖。不过该Operator的核心功能并不复杂。</li><li>缺少对于缺失Pod的恢复操作。代码中，看上去是ReplicaSet控制Worker&#x2F;Launcher Pod，实际上是Operator单独控制Pod，<a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/pkg/controllers/v1/mpi_job_controller.go#L869">源码</a>中以Pod为单位进行Create，而非ReplicaSet。原因可能是ReplicaSet无法控制名字生成，从而无法事先写好ConfigMap中的hostfile。因此，只要有一个worker pod启动失败了，那么就需要手动删除MPIJob（触发Operator删除所有Pod），再重新Create MPIJob。</li><li>缺少根据MPIJob的修改更新Pod的控制操作。如果想修改MPIJob任务（比如修改workers执行的命令），同样也要手动删除现有MPIJob，再重新Create新的MPIJob。相比于ConfigMap，RBAC有Update，<a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/pkg/controllers/v1/mpi_job_controller.go#L721">源码位置</a>，Worker没有，<a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/pkg/controllers/v1/mpi_job_controller.go#L885">源码位置</a>。原因是Pod能修改的部分非常有限，一般做法是删除Pod再重建Pod，而这些操作通过Update Pod的控制器来触发（比如ReplicaSet，StatefulSet）。</li><li>一些不影响使用的小问题。比如上一篇文章中我们发现的一些不必要的配置，如kubectl-delivery中生成的hosts文件等。比如缺乏对于ConfigMap，ServiceAccount等资源的回收。比如等待所有workers就绪的功能可以交给Operator来实现，而非kubectl-delivery。</li></ol><p>我正好这几天学习了kubebuilder，尝试重构一下MPI Operator代码，写一个简化版的，学习其流程，以便之后做一些自定义的修改。</p><h2 id="需求与做法"><a href="#需求与做法" class="headerlink" title="需求与做法"></a>需求与做法</h2><p>Operator本质上是用代码来自动化部署与管理yaml，按照我们手动部署的思路来就行</p><ol><li><p>我想利用operator框架（如kubebuilder）来实现它，并且不使用kubeflow相关的依赖，而且尽量简单，目前该项目的go代码大概在800行之内，并且由于新建ConfigMap，RBAC（Role，RoleBinding，ServiceAccount）重复代码较多，实际逻辑部分的代码比较少也比较简单。</p></li><li><p>添加Worker Pod自动滚动更新（不包括Launcher Pod），也即当用户修改MPIJob中Workers对应的信息，比如修改了command，我们需要检测到这一点，并让workers pod可以滚动更新，同时还需保证workers pod的名字可以事先写入hostfile中，实现方式：</p><ol><li>通过一个控制器StatefulSet控制Workers Pod，而非直接控制Workers Pod，保证名字</li><li>当MPIJob更新时，会调用Reconcile函数，其中会Update workers对应的StatefulSet，从而让Pod滚动更新</li></ol></li><li><p>添加自动恢复（Worker statefulset与Launcher pod）。我们需要察觉StatefulSet或Pod缺失，并重新Create。以便如果想重新跑任务可以直接手动删除Launcher Pod，如果想重新拉取最新代码，可以手动删除Worker StatefulSet等。做法：</p><ol><li>给每个MPIJob添加了周期性检测，比如周期为1分钟调用一次Reconcile函数</li><li>在Reconcile函数中，发现缺失资源，则根据最新MPIJob内容新建资源</li></ol></li><li><p>添加等待Worker StatefulSet就绪才生成并运行Launcher Pod的功能。因为Worker Pod上通常需要安装一些运行环境，如requirements.txt，或者git clone代码，此时不能生成Launcher Pod执行任务。做法是在新建Launcher Pod之前检测Worker StatefulSet的Status，直到ReadyReplicas数量等于workers数量。</p></li><li><p>删除一些不必要的配置</p><ol><li><p>删除worker pod中的kubexec.sh挂载（我不确定。它似乎不影响horovodrun，却影响mpirun）</p></li><li><p>删除kubectl-delivery中两个功能：</p><ol><li>等待workers就绪。这个放到Operator中实现</li><li>在&#x2F;opt&#x2F;kube文件夹下生成hosts文件</li></ol><p>只保留其复制kubectl的功能（只需在Dockerfile中写即可）</p></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MPI Operator原理分析</title>
    <link href="/2022/07/23/mpi-operator/"/>
    <url>/2022/07/23/mpi-operator/</url>
    
    <content type="html"><![CDATA[<p>MPI Operator是由kubeflow社区开发的，首先可以看看他们给的proposal文档<a href="https://github.com/kubeflow/community/blob/master/proposals/mpi-operator-proposal.md">https://github.com/kubeflow/community/blob/master/proposals/mpi-operator-proposal.md</a></p><p>之前我们使用过它来将模型训练任务部署到K8S中。这次我想来仔细看看它的实现原理。</p><h1 id="回顾上次使用"><a href="#回顾上次使用" class="headerlink" title="回顾上次使用"></a>回顾上次使用</h1><p>MPIJob是新建的CRD，用来描述MPI training的任务，比如以下是一个模型训练任务：</p><details>    <summary>MPIJob yaml</summary> <!-- Good place for a CTA (Call to Action) --> <!-- empty line *️⃣  -->  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeflow.org/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">MPIJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab</span><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">mpi-operator</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">mpiReplicaSpecs:</span><br>    <span class="hljs-attr">Launcher:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-string">1m</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cd</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">horovodrun</span> <span class="hljs-string">-np</span> <span class="hljs-number">2</span> <span class="hljs-string">--hostfile</span><br>              <span class="hljs-string">/etc/mpi/hostfile</span> <span class="hljs-string">python</span> <span class="hljs-string">main_with_horovod.py</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/bin/sh&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-master</span><br>    <span class="hljs-attr">Worker:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">-c</span> <span class="hljs-string">http.sslVerify=false</span> <span class="hljs-string">clone</span> <span class="hljs-string">&lt;https://gitlab.bdap.com/faraway/simple_ml.git&gt;</span><br>              <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cd</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">-r</span> <span class="hljs-string">requirements.txt</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">init.sh</span><br>              <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">./init.sh</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sleep</span> <span class="hljs-string">infinity</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/bin/sh&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-worker</span><br>            <span class="hljs-attr">resources:</span><br>              <span class="hljs-attr">limits:</span><br>                <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">tolerations:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>            <span class="hljs-attr">key:</span> <span class="hljs-string">gpu</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>  <span class="hljs-attr">runPolicy:</span><br>    <span class="hljs-attr">cleanPodPolicy:</span> <span class="hljs-string">Running</span><br>  <span class="hljs-attr">slotsPerWorker:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></details><!-- empty line *️⃣  --><p>根据该MPIJob的内容，我们期望其Controller可以生成一个Launcher Pod与多个Workers Pods来执行任务，比如：</p><details>    <summary>Launcher Pod（部分信息省略）</summary> <!-- Good place for a CTA (Call to Action) --> <!-- empty line *️⃣  -->  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab-launcher</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <span class="hljs-string">1m</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cd</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">horovodrun</span> <span class="hljs-string">-np</span> <span class="hljs-number">2</span> <span class="hljs-string">--hostfile</span> <span class="hljs-string">/etc/mpi/hostfile</span><br>      <span class="hljs-string">python</span> <span class="hljs-string">main_with_horovod.py</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">OMPI_MCA_plm_rsh_agent</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">/etc/mpi/kubexec.sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">OMPI_MCA_orte_default_hostfile</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">/etc/mpi/hostfile</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NVIDIA_VISIBLE_DEVICES</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NVIDIA_DRIVER_CAPABILITIES</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-master</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/kube</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-kubectl</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mpi</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">kube-api-access-jf6hw</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">initContainers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TARGET_DIR</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">/opt/kube</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NAMESPACE</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">mpi-operator</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mpioperator/kubectl-delivery:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-delivery</span><br>    <span class="hljs-attr">resources:</span> <span class="hljs-string">...</span><br>    <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>    <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/kube</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-kubectl</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mpi</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">kube-api-access-jf6hw</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br>  <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">sw-simple-ml-gitlab-launcher</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-kubectl</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>      <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubexec.sh</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">365</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">kubexec.sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">hostfile</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">292</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">hostfile</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">discover_hosts.sh</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">365</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">discover_hosts.sh</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab-config</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-config</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-api-access-jf6hw</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure></details><!-- empty line *️⃣  --><details>    <summary>Worker Pod（部分信息省略）</summary><!-- empty line -->    <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab-worker-0</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">-c</span> <span class="hljs-string">http.sslVerify=false</span> <span class="hljs-string">clone</span> <span class="hljs-string">&lt;https://gitlab.bdap.com/faraway/simple_ml.git&gt;</span><br>      <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cd</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">-r</span> <span class="hljs-string">requirements.txt</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">init.sh</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">./init.sh</span><br>      <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sleep</span> <span class="hljs-string">infinity</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-worker</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">limits:</span><br>        <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>      <span class="hljs-attr">requests:</span><br>        <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mpi</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">kube-api-access-qw2jr</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tolerations:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">gpu</span><br>    <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">configMap:</span><br>      <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubexec.sh</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">365</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">kubexec.sh</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab-config</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mpi-job-config</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-api-access-qw2jr</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure></details><!-- empty line --><h1 id="从生成的Pod来猜测Controller做了什么"><a href="#从生成的Pod来猜测Controller做了什么" class="headerlink" title="从生成的Pod来猜测Controller做了什么"></a>从生成的Pod来猜测Controller做了什么</h1><p>首先Controller需要把MPIJob中的信息写入生成的Pod中。对于Worker Pod来说，就足够了，只需要等待Launcher发送命令。</p><p>而对于Launcher Pod来说，Controller还要为它做一些额外的事情，包括：</p><ol><li>添加volumes，&#x2F;etc&#x2F;mpi挂载一个ConfigMap，其中hostfile内容为workers的名字。第二个是&#x2F;opt&#x2F;kube，挂载emptyDir，用于接收initContainer的信息。</li><li>新增一个initContainer，名为kubectl-delivery，可以看到有一个环境变量<code>TARGET_DIR</code>为&#x2F;opt&#x2F;kube，在具体看其实现之前，我们可以猜测它的作用是将一些东西放到&#x2F;opt&#x2F;kube下，以供主container使用。</li></ol><h2 id="kubectl-delivery"><a href="#kubectl-delivery" class="headerlink" title="kubectl-delivery"></a>kubectl-delivery</h2><p>关键在于kubectl-delivery，现在我们通过代码，来具体看看kubectl-delivery的流程：</p><ol><li>从<a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/cmd/kubectl-delivery/Dockerfile#L17">Dockerfile</a>中看它的启动命令为<code>cp /bin/kubectl /opt/kube/kubectl; /bin/kubectl-delivery -alsologtostderr</code>，将kubectl文件cp到&#x2F;opt&#x2F;kube下</li><li><a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/cmd/kubectl-delivery/app/server.go#L95">源码</a>，解析&#x2F;etc&#x2F;mpi下的hostfile（由Controller生成，通过ConfigMap挂载），找到workers对应的Pod名字</li><li><a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/pkg/controllers/kubectl_delivery/controller.go#L75">源码</a>，在<code>NewKubectlDeliveryController</code>中，将这些Pod加入watchedPods列表</li><li><a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/pkg/controllers/kubectl_delivery/controller.go#L132">源码</a>，监听workers Pod，一旦正常运行则从watchedPods中删除</li><li><a href="https://github.com/kubeflow/mpi-operator/blob/993b010e05c48c6f6ef5a5180362ccd3e716982e/pkg/controllers/kubectl_delivery/controller.go#L150">源码</a>，等待workers全部正常运行后，在&#x2F;opt&#x2F;kube下生成hosts文件，里面记录了workers和自己（通过&#x2F;etc&#x2F;hosts最后一行获取）的Pod名字与对应IP</li></ol><p>因此，kubectl-delivery一共做了三件事：</p><ol><li>等待Workers Pod就绪</li><li>生成hosts文件，包含了Launcher和Workers Pod的名字与IP（不过我后续发现这个似乎没有发挥作用）</li><li>拷贝kubectl可执行文件</li></ol><p>kubectl与hosts文件都放在&#x2F;opt&#x2F;kube下，以供主container使用。</p><h2 id="Launcher-main-container"><a href="#Launcher-main-container" class="headerlink" title="Launcher main container"></a>Launcher main container</h2><p>但是问题来了。我们的Launcher主container中，是在哪里用了&#x2F;opt&#x2F;kube中的两个文件呢？</p><p>如果我们取消kubectl-delivery的执行，可以查看主container的报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh not successful <span class="hljs-keyword">for</span> host sw-simple-ml-gitlab-worker-1:<br>+ POD_NAME=sw-simple-ml-gitlab-worker-1<br>+ <span class="hljs-built_in">shift</span><br>+ /opt/kube/kubectl <span class="hljs-built_in">exec</span> sw-simple-ml-gitlab-worker-1 -- /bin/sh -c <span class="hljs-literal">true</span><br>/etc/mpi/kubexec.sh: 5: /opt/kube/kubectl: not found<br><br>ssh not successful <span class="hljs-keyword">for</span> host sw-simple-ml-gitlab-worker-0:<br>+ POD_NAME=sw-simple-ml-gitlab-worker-0<br>+ <span class="hljs-built_in">shift</span><br>+ /opt/kube/kubectl <span class="hljs-built_in">exec</span> sw-simple-ml-gitlab-worker-0 -- /bin/sh -c <span class="hljs-literal">true</span><br>/etc/mpi/kubexec.sh: 5: /opt/kube/kubectl: not found<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/usr/local/bin/horovodrun&quot;</span>, line 8, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    sys.exit(run_commandline())<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/dist-packages/horovod/runner/launch.py&quot;</span>, line 773, <span class="hljs-keyword">in</span> run_commandline<br>    _run(args)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/dist-packages/horovod/runner/launch.py&quot;</span>, line 763, <span class="hljs-keyword">in</span> _run<br>    <span class="hljs-built_in">return</span> _run_static(args)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/dist-packages/horovod/runner/launch.py&quot;</span>, line 589, <span class="hljs-keyword">in</span> _run_static<br>    raise RuntimeError(<span class="hljs-string">&#x27;could not connect to some hosts via ssh&#x27;</span>)<br>RuntimeError: could not connect to some hosts via ssh<br></code></pre></td></tr></table></figure><p>可以看到是由<code>/etc/mpi/kubexec.sh</code>调用，那么谁在调用<code>kubexec.sh</code>呢？</p><p>查看Launcher Pod可以发现我们有一个环境变量<code>OMPI_MCA_plm_rsh_agent</code>，因此合理猜想，会不会是mpirun在使用之前会用该环境变量对应的脚本来发现worker？</p><p>查看mpirun中MCA参数的文档，<a href="https://docs.oracle.com/cd/E19708-01/821-1319-10/mca-params.html">https://docs.oracle.com/cd/E19708-01/821-1319-10/mca-params.html</a></p><p><img src="/img/1.png"></p><p>查找plm_rsh_agent参数的作用，<a href="https://www.open-mpi.org/faq/?category=rsh">https://www.open-mpi.org/faq/?category=rsh</a></p><p>我们发现这个参数是用来远程执行命令的连接方式前缀，取值一般为ssh或者rsh。</p><p>举例说明，比如我们想在服务器server-name执行ls somedir命令，则需要运行<code>$OMPI_MCA_plm_rsh_agent server-name ls somedir</code></p><p>我们具体看看<code>kubexec.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">set</span> -x<br>POD_NAME=<span class="hljs-variable">$1</span><br><span class="hljs-built_in">shift</span><br>/opt/kube/kubectl <span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;POD_NAME&#125;</span> -- /bin/sh -c <span class="hljs-string">&quot;$*&quot;</span><br></code></pre></td></tr></table></figure><ol><li>set -x显示脚本的执行过程</li><li>POD_NAME为接受的第一个参数，也即连接的服务器名字</li><li>通过shift让参数后移（移除了第一个POD_NAME参数）。</li><li>让kubectl exec来远程执行后面的命令</li></ol><p>用kubectl exec的连接方式替换了ssh的连接方式（妙</p><p>还可以稍微在看一下运行的命令具体是什么，截取一部分（因为包含非常多不相干的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/kube/kubectl <span class="hljs-built_in">exec</span> sw-simple-ml-gitlab-worker-1 -- /bin/sh -c<br><span class="hljs-built_in">cd</span> /simple_ml &gt; /dev/null 2&gt;&amp;1 ;<br>HOROVOD_HOSTNAME=sw-simple-ml-gitlab-worker-1<br>HOROVOD_RANK=1<br>HOROVOD_SIZE=3<br>HOROVOD_LOCAL_RANK=0<br>HOROVOD_LOCAL_SIZE=1<br>HOROVOD_CROSS_RANK=1<br>HOROVOD_CROSS_SIZE=3<br>PWD=/simple_ml<br>HOROVOD_GLOO_RENDEZVOUS_ADDR=10.244.3.140<br>HOROVOD_GLOO_RENDEZVOUS_PORT=59558<br>HOROVOD_CONTROLLER=gloo<br>HOROVOD_CPU_OPERATIONS=gloo<br>HOROVOD_GLOO_IFACE=eth0<br>NCCL_SOCKET_IFNAME=eth0<br>python main_with_horovod.py<br></code></pre></td></tr></table></figure><p>其中HOROVOD_GLOO_RENDEZVOUS_ADDR&#x3D;10.244.3.140正好是Launcher Pod的IP，说明Workers Pod以Launcher Pod为中心进行通信。</p><p>现在还有一个问题是，&#x2F;opt&#x2F;kube文件夹下的hosts似乎没有用到。我尝试将其删除（做法是将kubectl-delivery的命令改为<code>cp /bin/kubectl /opt/kube/kubectl; /bin/kubectl-delivery -alsologtostderr; rm /opt/kube/hosts</code>），也能正确执行任务。因为kubectl exec只需要知道Pod Name就行，不需要IP。以及Worker中的kubexec.sh也不需要挂载（可以由后续我添加的worker验证）。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>我们已经大概理解了流程，这里举个例子来验证，同时也看看会不会有什么遗漏。比如，如果我想增加一个worker，不用MPI Operator，不修改MPIJob，我应该如何手动写yaml实现？</p><ol><li>创建一个Worker Pod，运行sleep infinity，我这里并没有挂载kubexec.sh以及hostfile</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">add-worker</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">mpi-operator</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">git</span> <span class="hljs-string">-c</span> <span class="hljs-string">http.sslVerify=false</span> <span class="hljs-string">clone</span> <span class="hljs-string">&lt;https://gitlab.bdap.com/faraway/simple_ml.git&gt;</span><br>      <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cd</span> <span class="hljs-string">simple_ml</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">-r</span> <span class="hljs-string">requirements.txt</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">init.sh</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">./init.sh</span><br>      <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sleep</span> <span class="hljs-string">infinity</span><br>    <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-worker</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">limits:</span><br>        <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>      <span class="hljs-attr">requests:</span><br>        <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-attr">dnsConfig:</span><br>    <span class="hljs-attr">nameservers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">10.105</span><span class="hljs-number">.222</span><span class="hljs-number">.6</span><br>  <span class="hljs-attr">tolerations:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">gpu</span><br>    <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将该Pod的名字加入ConfigMap的hostfile中。注意要先把ConfigMap的ownerReferences删除。防止Controller覆盖我们的修改。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">discover_hosts.sh:</span> <span class="hljs-bullet">-</span><br>    <span class="hljs-comment">#!/bin/sh</span><br>    <span class="hljs-string">echo</span> <span class="hljs-string">sw-simple-ml-gitlab-worker-0:1</span><br>    <span class="hljs-string">echo</span> <span class="hljs-string">sw-simple-ml-gitlab-worker-1:1</span><br>  <span class="hljs-attr">hostfile:</span> <br>    <span class="hljs-string">sw-simple-ml-gitlab-worker-0</span> <span class="hljs-string">slots=1</span><br>    <span class="hljs-string">sw-simple-ml-gitlab-worker-1</span> <span class="hljs-string">slots=1</span><br>    <span class="hljs-string">add-worker</span> <span class="hljs-string">slots=1</span><br>  <span class="hljs-attr">kubexec.sh:</span> <span class="hljs-bullet">-</span><br>    <span class="hljs-comment">#!/bin/sh</span><br>    <span class="hljs-string">set</span> <span class="hljs-string">-x</span><br>    <span class="hljs-string">POD_NAME=$1</span><br>    <span class="hljs-string">shift</span><br>    <span class="hljs-string">/opt/kube/kubectl</span> <span class="hljs-string">exec</span> <span class="hljs-string">$&#123;POD_NAME&#125;</span> <span class="hljs-string">--</span> <span class="hljs-string">/bin/sh</span> <span class="hljs-string">-c</span> <span class="hljs-string">&quot;$*&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">mpi-operator</span><br></code></pre></td></tr></table></figure><ol start="3"><li>新建一个Launcher Pod，并将运行的np改为3</li></ol><p>不过发现出错，应该是权限问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error from server (Forbidden): pods <span class="hljs-string">&quot;add-worker&quot;</span> is forbidden:<br>User <span class="hljs-string">&quot;system:serviceaccount:mpi-operator:sw-simple-ml-gitlab-launcher&quot;</span><br>cannot create resource <span class="hljs-string">&quot;pods/exec&quot;</span> <span class="hljs-keyword">in</span> API group <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;mpi-operator&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>需要修改RBAC中的Role，添加resourceNames，顺便去掉ownerReferences防止operator覆盖</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab-launcher</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">mpi-operator</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resourceNames:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sw-simple-ml-gitlab-worker-0</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sw-simple-ml-gitlab-worker-1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">add-worker</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/exec</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>controller做的事情：</p><ol><li>根据MPIJob请求的workers的数量，生成其Pod名字，存储到ConfigMap中，事先写好kubexec.sh脚本</li><li>从MPIJob请求中提取workers Pod信息生成workers，应该没有其他额外操作了</li><li>从MPIJob请求中提取launcher Pod信息生成launcher<ol><li>给Launcher添加initContainer，它们两个共享&#x2F;opt&#x2F;kube</li><li>将ConfigMap挂载到&#x2F;etc&#x2F;mpi，添加环境变量以供mpirun调用&#x2F;etc&#x2F;mpi&#x2F;kubexec.sh</li><li>给Launcher Pod添加ServiceAccount，并给其添加exec workers pod的权限</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>R</title>
    <link href="/2022/07/18/r/"/>
    <url>/2022/07/18/r/</url>
    
    <content type="html"><![CDATA[<blockquote><p>流水下滩非有意，白云出岫本无心。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>R解释器的安装，以MacOS系统为例，在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install r<br></code></pre></td></tr></table></figure><p>输入R进入命令行界面</p><p>图形化界面推荐使用<a href="https://www.rstudio.com/">RStudio</a></p><h2 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h2><ul><li>R语言基础，<a href="https://www.w3schools.com/r">https://www.w3schools.com/r</a></li><li>查询R语言中，各种包的用法，<a href="https://www.rdocumentation.org/">https://www.rdocumentation.org</a></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>类似Python，变量无需事先声明，给变量赋值即创建变量。赋值可以用’&#x3D;’也可以用’&lt;-‘。可以通过输入变量名或者print来打印变量。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">name <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;A&quot;</span><br>name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;A&quot;</span><br>var1 <span class="hljs-operator">&lt;-</span> var2 <span class="hljs-operator">&lt;-</span> var3 <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;B&quot;</span><br>var1 <span class="hljs-operator">=</span> var2 <span class="hljs-operator">=</span> var3 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;B&quot;</span><br><br>name <span class="hljs-comment"># 这是一行注释。想说输入x会输出x的值，&quot;A&quot;</span><br>print<span class="hljs-punctuation">(</span>var2<span class="hljs-punctuation">)</span> <span class="hljs-comment"># 这也是一行注释，&quot;B&quot;</span><br></code></pre></td></tr></table></figure><h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><ul><li><code>numeric</code>（数字，例如，1.5，10）</li><li><code>integer</code>（整数，例如，4L，后缀L用来代表整数）</li><li><code>complex</code>（复数，例如3+4i）</li><li><code>character</code>（字符串，例如”1.5”，”hello”）</li><li><code>logical</code>（布尔，取值TRUE或FALSE）</li></ul><p>使用class(x)可以判断一个变量x的数据类型。使用as.type(x)可以强制转换变量x的数据类型（前三种类型）。从numeric到integer会向下取整。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">x<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-comment"># numeric</span><br><br>x<span class="hljs-operator">=</span><span class="hljs-number">10.5</span><br>newx <span class="hljs-operator">=</span> <span class="hljs-built_in">as.integer</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>newx<span class="hljs-punctuation">)</span> <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><h3 id="数字类型，以及Math模块中一些常见的函数"><a href="#数字类型，以及Math模块中一些常见的函数" class="headerlink" title="数字类型，以及Math模块中一些常见的函数"></a>数字类型，以及Math模块中一些常见的函数</h3><ul><li>最大最小值max(…)，min(…)</li><li>开根号sqrt(x)</li><li>绝对值abs(x)</li><li>向上取整与向下取整ceiling(x)，floor(x)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># 15</span><br><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># 5</span><br><br>x<span class="hljs-operator">=</span><span class="hljs-number">3.14</span><br><span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-comment"># 1.772005</span><br><br>x<span class="hljs-operator">=</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><br><span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-comment"># 1</span><br><br><span class="hljs-built_in">ceiling</span><span class="hljs-punctuation">(</span><span class="hljs-number">3.14</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">floor</span><span class="hljs-punctuation">(</span><span class="hljs-number">3.14</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure><h3 id="字符串类型，以及简单的操作函数"><a href="#字符串类型，以及简单的操作函数" class="headerlink" title="字符串类型，以及简单的操作函数"></a>字符串类型，以及简单的操作函数</h3><p>双引号或者单引号都可以，等效。在引号中间可以有回车。print会直接输出转义字符，而想要转义字符（什么是<a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6">转义字符</a>）发挥作用，则需要使用cat。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">str <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;Lorem ipsum dolor sit amet,</span><br><span class="hljs-string">consectetur adipiscing elit,</span><br><span class="hljs-string">sed do eiusmod tempor incididunt</span><br><span class="hljs-string">ut labore et dolore magna aliqua.&quot;</span><br><br>str <span class="hljs-comment"># &quot;Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.&quot;</span><br><br>cat<span class="hljs-punctuation">(</span>str<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># Lorem ipsum dolor sit amet,</span><br><span class="hljs-comment"># consectetur adipiscing elit,</span><br><span class="hljs-comment"># sed do eiusmod tempor incididunt</span><br><span class="hljs-comment"># ut labore et dolore magna aliqua.</span><br></code></pre></td></tr></table></figure><p>常见的一些函数：</p><ul><li>字符串长度，nchar(str)</li><li>字符串中查找子串，grepl(a,b)，其中a是子字符串，b是被查找的字符串</li><li>字符串拼接：paste(a,b)，默认在两个字符串中间添加空格，使用sep&#x3D;””可以取消</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span><br>nchar<span class="hljs-punctuation">(</span>str<span class="hljs-punctuation">)</span> <span class="hljs-comment"># 3</span><br><br>a <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>b <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span><br>grepl<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">)</span> <span class="hljs-comment"># TRUE</span><br><br>a <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>b <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span><br>paste<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">)</span> <span class="hljs-comment"># &quot;hello world&quot;</span><br>paste<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># &quot;helloworld&quot;</span><br></code></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>取值TURE或FALSE，用于条件判断。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># 一些例子</span><br><span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">2</span> <span class="hljs-comment"># TRUE</span><br><span class="hljs-number">1</span> <span class="hljs-operator">==</span> <span class="hljs-number">2</span> <span class="hljs-comment"># FALSE</span><br><span class="hljs-number">1</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-comment"># FLASE</span><br>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-operator">!=</span> <span class="hljs-number">2</span><br>x <span class="hljs-comment"># TRUE</span><br><br>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>y <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>x <span class="hljs-operator">&lt;</span> y <span class="hljs-comment"># TRUE</span><br></code></pre></td></tr></table></figure><h2 id="变量之间的运算符"><a href="#变量之间的运算符" class="headerlink" title="变量之间的运算符"></a>变量之间的运算符</h2><ul><li>算术符<ul><li>加减乘除，’+’，’-‘，’*‘，’&#x2F;‘</li><li>指数，’^’</li><li>取余，’%%’</li><li>整除，’%&#x2F;%’</li></ul></li><li>赋值符<ul><li>赋值，’&#x3D;’，’&lt;-‘</li><li>全局赋值（之后详细说），’&lt;&lt;-‘</li></ul></li><li>比较符<ul><li>大于，小于，等于分别为，’&gt;’，’&lt;’，’&#x3D;&#x3D;’</li><li>大于等于，小于等于，不等于为，’&gt;&#x3D;’，’&lt;&#x3D;’，’!&#x3D;’</li></ul></li><li>逻辑符<ul><li>与，’&amp;’，’&amp;&amp;’都可以，不过’&amp;&amp;’有提前终止</li><li>或，’’，’’</li><li>非，’!’</li></ul></li><li>其他运算符（操作符），举例<ul><li>生成序列，’:’</li><li>判断数组中的包含关系，%in%</li><li>矩阵乘，’%*%’</li><li>访问下标，’[]‘</li><li>访问name list中的成员，’$’</li><li>访问S4对象的slot，‘@’</li><li>…</li></ul></li></ul><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="If语句"><a href="#If语句" class="headerlink" title="If语句"></a>If语句</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>condition<span class="hljs-punctuation">)</span> ... <span class="hljs-keyword">else</span> ...<br></code></pre></td></tr></table></figure><p>变量condition为布尔类型，如果为TRUE则执行else前面的语句，如果为FALSE则执行else后面的语句。当然else以及else后面的语句可以省略。</p><p>如果想执行多条语句，则需要给多条语句用{}包起来。同时在R语言中，{}定义了变量作用域（后面讲）。当然，运行的语句又可以再次使用if语句，因此可以嵌套多层。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># 一些例子</span><br><span class="hljs-comment"># TODO</span><br></code></pre></td></tr></table></figure><h3 id="While语句"><a href="#While语句" class="headerlink" title="While语句"></a>While语句</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">while</span> <span class="hljs-punctuation">(</span>condition<span class="hljs-punctuation">)</span> ...<br></code></pre></td></tr></table></figure><p>R语言中循环包括两种，一个是while，另一个是for。if语句是满足条件则执行一次，而while语句则是如果满足条件，那么就一直重复执行该代码。同样，如果多行代码则用{}括起来。</p><p>在循环中，可以通过break语句退出循环，也可以通过next语句提前进入下一次循环。这两个也都是关键字。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># 一些例子</span><br><span class="hljs-comment"># TODO</span><br></code></pre></td></tr></table></figure><h3 id="For语句"><a href="#For语句" class="headerlink" title="For语句"></a>For语句</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>item <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">)</span> ...<br></code></pre></td></tr></table></figure><p>与while相比，for更喜欢与in结合来遍历一个数组或者列表。同时也有break和next。以及可以有多层循环。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># 一些例子</span><br><span class="hljs-comment"># TODO</span><br></code></pre></td></tr></table></figure><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p>未完待续…</p>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Elastic Cloud on Kubernetes (ECK)</title>
    <link href="/2022/07/08/elastic-cloud-on-kubernetes-eck/"/>
    <url>/2022/07/08/elastic-cloud-on-kubernetes-eck/</url>
    
    <content type="html"><![CDATA[<p>最终目的是：将K8S的Pod产生的日志收集到Elastic Search中，从而能通过搜索关键词快速定位问题。</p><h2 id="部署ES和Kibana"><a href="#部署ES和Kibana" class="headerlink" title="部署ES和Kibana"></a>部署ES和Kibana</h2><p>参考<a href="https://www.elastic.co/guide/en/cloud-on-k8s/2.1/k8s-overview.html"></a><a href="https://www.elastic.co/guide/en/cloud-on-k8s/2.1/k8s-overview.html">https://www.elastic.co/guide/en/cloud-on-k8s/2.1/k8s-overview.html</a></p><p>先部署CRD，和Operator，用于操作cluster。</p><p>之后通过自己定义cluster，创建EScluster，Kibana服务。</p><details>    <summary>Elasticsearch yaml</summary><!-- empty line -->    <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">elasticsearch.k8s.elastic.co/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Elasticsearch</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">quickstart-pvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/elasticsearch:8.2.0</span><br>  <span class="hljs-attr">nodeSets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">node.store.allow_mmap:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">count:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">volumeClaimTemplates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-data</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">accessModes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">storage:</span> <span class="hljs-string">50Gi</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">8.2</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure></details><!-- empty line --><details>    <summary>Kibana yaml</summary><!-- empty line -->    <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kibana.k8s.elastic.co/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Kibana</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">quickstart</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">xpack.fleet.agentPolicies:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">new-eck-fleet-server</span><br>      <span class="hljs-attr">is_default_fleet_server:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">monitoring_enabled:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">metrics</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">fleet</span> <span class="hljs-string">server</span> <span class="hljs-string">policy</span><br>      <span class="hljs-attr">package_policies:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">fleet_server-1</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">fleet_server-1</span><br>        <span class="hljs-attr">package:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">fleet_server</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">container-log-eck-agent</span><br>      <span class="hljs-attr">is_default:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">monitoring_enabled:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">metrics</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">container</span> <span class="hljs-string">log</span> <span class="hljs-string">elastic</span> <span class="hljs-string">agent</span><br>      <span class="hljs-attr">package_policies:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">elastic_agent-1</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">elastic_agent-1</span><br>        <span class="hljs-attr">package:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">elastic_agent</span><br>      <span class="hljs-attr">unenroll_timeout:</span> <span class="hljs-number">900</span><br>    <span class="hljs-attr">xpack.fleet.agents.elasticsearch.hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;https://quickstart-pvc-es-http.elastic-system.svc:9200&gt;</span><br>    <span class="hljs-attr">xpack.fleet.agents.fleet_server.hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;https://fleet-server-quickstart-agent-http.elastic-system.svc:8220&gt;</span><br>    <span class="hljs-attr">xpack.fleet.packages:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elastic_agent</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">latest</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fleet_server</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">latest</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">elasticsearchRef:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">quickstart-pvc</span><br>  <span class="hljs-attr">http:</span><br>    <span class="hljs-attr">tls:</span><br>      <span class="hljs-attr">selfSignedCertificate:</span><br>        <span class="hljs-attr">disabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/elasticsearch/kibana:8.2.0</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">8.2</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure></details><!-- empty line --><h2 id="部署Elastic-Agent"><a href="#部署Elastic-Agent" class="headerlink" title="部署Elastic Agent"></a>部署Elastic Agent</h2><p>Agent的yaml配置，【注意】mount的路径配置，对应一个k8s中的daemonst，收集每个机器上的log</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">agent.k8s.elastic.co/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Agent</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elastic-agent-quickstart</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">daemonSet:</span><br>    <span class="hljs-attr">podTemplate:</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">automountServiceAccountToken:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">agent</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/home/docker/lib/docker/containers&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/var/log/containers&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">varlogcontainers</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/var/log/pods&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">varlogpods</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">elastic-agent</span><br>        <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/home/docker/lib/docker/containers&quot;</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/var/log/containers&quot;</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">varlogcontainers</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/var/log/pods&quot;</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">varlogpods</span><br>  <span class="hljs-attr">fleetServerRef:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">fleet-server-quickstart</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">elastic/elastic-agent:8.2.0</span><br>  <span class="hljs-attr">kibanaRef:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">quickstart</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">fleet</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">8.2</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>这三个路径的关系：&#x2F;var&#x2F;log&#x2F;containers&#x2F;<em>.log为软连接，指向&#x2F;var&#x2F;log&#x2F;pods&#x2F;</em>&#x2F;<em>&#x2F;</em>.log软连接，再指向&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;<em>&#x2F;</em>.log，为了让日志中包含pod名字，我们使用需要软连接，勾选Use Symlinks，且Kubernetes container log path为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/containers/</span>*<span class="hljs-variable">$&#123;kubernetes.container.id&#125;</span>.log<br></code></pre></td></tr></table></figure><p>【注意】由于裸机上的软连接最终指向【已经修改过路径的】&#x2F;home&#x2F;docker&#x2F;lib&#x2F;docker&#x2F;containers，因此，在container中也要mount到一样的路径下，而非默认的&#x2F;var&#x2F;lib。</p><details>    <summary>Fleet Server yaml</summary><!-- empty line -->    <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">agent.k8s.elastic.co/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Agent</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fleet-server-quickstart</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">elastic-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">deployment:</span><br>    <span class="hljs-attr">podTemplate:</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">automountServiceAccountToken:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">elastic-agent</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">elasticsearchRefs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">quickstart-pvc</span><br>  <span class="hljs-attr">fleetServerEnabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">elastic/elastic-agent:8.2.0</span><br>  <span class="hljs-attr">kibanaRef:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">quickstart</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">fleet</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">8.2</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure></details><!-- empty line --><p>tips:</p><p>之后对于elastic agent的各种配置，直接在kibana网页进行修改，且将配置存储到了数据库中。yaml中的后续修改可能不起作用。</p><p>比如：</p><ul><li>在integrations中kubernetes的proxy设置里，将localhost修改为：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;env.NODE_NAME&#125;</span>:10249<br></code></pre></td></tr></table></figure><ul><li>integrations中System的设置有默认server.example.com域名，可以选择关闭</li></ul><p>如果要删除现有policy以及agent，重新通过yaml进行部署的话，需要修改新部署的policy对应id，原因是修改过的配置被web服务存储到了数据库中，因此出现冲突。</p><p>最终效果：</p><ul><li>根据关键词，搜索日志</li></ul><p><img src="/img/4.png"></p><ul><li>滚动式日志</li></ul><p><img src="/img/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Horovod on Kubernetes</title>
    <link href="/2022/07/07/horovod-on-kubernetes/"/>
    <url>/2022/07/07/horovod-on-kubernetes/</url>
    
    <content type="html"><![CDATA[<p>上一篇文章将Horovod封装到Docker image中，本文将进一步将其部署到Kubernetes集群上进行多机多GPU分布式训练。借助的工具为MPI-Operator，<a href="https://github.com/kubeflow/mpi-operator">https://github.com/kubeflow/mpi-operator</a></p><p>我们已经有horovod镜像了，部署到K8S上不是小菜一碟吗？然而没有那么简单，中间还有一些要注意的点。</p><h2 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h2><p>如果仅用kubectl来部署，做法可以是，把代码封装到镜像中，就像MPI-Operator中的example镜像那样做。接下来的过程可以参考Horovod in Docker，<a href="https://horovod.readthedocs.io/en/stable/docker_include.html#">https://horovod.readthedocs.io/en/stable/docker_include.html#</a></p><ul><li>部署一个master pod执行以下代码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">horovodrun -np 16 -H host1:4,host2:4,host3:4,host4:4 -p 12345 python keras_mnist_advanced.py<br></code></pre></td></tr></table></figure><ul><li>部署多个worker pod执行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;/usr/sbin/sshd -p 12345; sleep infinity&quot;</span><br></code></pre></td></tr></table></figure><p>不过需要注意的点是：</p><ol><li>我们需要事先将ssh key写到master与worker pod配置文件中，以便它们通信</li><li>master需要得知worker结点的名字来执行horovodrun命令，但是worker pod的名字一般是运行时生成的</li></ol><h2 id="借用MPI-Operator"><a href="#借用MPI-Operator" class="headerlink" title="借用MPI Operator"></a>借用MPI Operator</h2><p>这些操作都比较烦，因此MPI operator出现了。它具体做了哪些操作呢？可以参考，<a href="https://medium.com/kubeflow/introduction-to-kubeflow-mpi-operator-and-industry-adoption-296d5f2e6edc">https://medium.com/kubeflow/introduction-to-kubeflow-mpi-operator-and-industry-adoption-296d5f2e6edc</a>，以及<a href="https://github.com/kubeflow/community/blob/master/proposals/mpi-operator-proposal.md">https://github.com/kubeflow/community/blob/master/proposals/mpi-operator-proposal.md</a></p><p>大概过程：MPI使用kubectl exec完成第一次握手（从而可以让他们之间互相认识，后续进行通信），并且将workers pod对应的url给存储到configMap中，再挂载到master上。</p><p>此时，我们的训练流程为：</p><ul><li>修改代码</li><li>在horovod-base镜像上，重新build镜像（甚至可以安装自己的环境）</li><li>创建MPI Job</li></ul><p>问题在于，每次代码有变化都需要重新build以及push镜像，而由于horovod环境较为笨重导致镜像本身很大。因此这种方式还需要改进。</p><h2 id="借用Gitlab管理代码"><a href="#借用Gitlab管理代码" class="headerlink" title="借用Gitlab管理代码"></a>借用Gitlab管理代码</h2><p>有一种做法是，把代码单独拎出来，push到gitlab私服上，然后在MPI Job中通过git拉取。其中环境这一点通过requirements.txt的方式也保存下来。然后在每次创建MPI Job的时候后，在镜像中进行安装。</p><p>输入的数据，输出的模型参数等都存储在统一存储S3中。</p><p>此时，我们的训练流程为：</p><ul><li>本地修改代码，commit &amp; push到gitlab上</li><li>创建MPI Job，其中需要写git clone，pip install，horovodrun等命令</li></ul><p>MPI Job的例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeflow.org/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">MPIJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">mpi-operator</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sw-simple-ml-gitlab</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">slotsPerWorker:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">runPolicy:</span><br>    <span class="hljs-attr">cleanPodPolicy:</span> <span class="hljs-string">Running</span><br>  <span class="hljs-attr">mpiReplicaSpecs:</span><br>    <span class="hljs-attr">Launcher:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-master</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br>            <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;sleep 1m &amp;&amp; mkdir simple_ml &amp;&amp; cd simple_ml &amp;&amp; horovodrun -np 2 --hostfile /etc/mpi/hostfile python main_with_horovod.py&quot;</span>]<br>    <span class="hljs-attr">Worker:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">&quot;None&quot;</span><br>          <span class="hljs-attr">dnsConfig:</span><br>            <span class="hljs-attr">nameservers:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">10.105</span><span class="hljs-number">.222</span><span class="hljs-number">.6</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">coreharbor.bdap.com/library/horovod-sw-base</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">horovod-worker</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br>            <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;git -c http.sslVerify=false clone https://gitlab.bdap.com/faraway/simple_ml.git &amp;&amp; cd simple_ml &amp;&amp; pip install -r requirements.txt &amp;&amp; sleep infinity&quot;</span>]<br>            <span class="hljs-attr">resources:</span><br>              <span class="hljs-attr">limits:</span><br>                <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">tolerations:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>            <span class="hljs-attr">key:</span> <span class="hljs-string">gpu</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br></code></pre></td></tr></table></figure><p>训练效果：</p><details>    <summary>训练过程的输出</summary><!-- empty line -->    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">[0]&lt;stderr&gt;:+ POD_NAME=sw-simple-ml-gitlab-worker-0<br>[0]&lt;stderr&gt;:+ <span class="hljs-built_in">shift</span><br>[0]&lt;stderr&gt;:+ /opt/kube/kubectl <span class="hljs-built_in">exec</span> sw-simple-ml-gitlab-worker-0 -- /bin/sh -c <span class="hljs-built_in">cd</span> /simple_ml &gt; /dev/null 2&gt;&amp;1 ; HOROVOD_HOSTNAME=sw-simple-ml-gitlab-worker-0 HOROVOD_RANK=0 HOROVOD_SIZE=2 HOROVOD_LOCAL_RANK=0 HOROVOD_LOCAL_SIZE=1 HOROVOD_CROSS_RANK=0 HOROVOD_CROSS_SIZE=2 LIBRARY_PATH=/usr/local/cuda/lib64/stubs KUBERNETES_SERVICE_PORT=443 KUBERNETES_PORT=tcp://10.96.0.1:443 HOSTNAME=sw-simple-ml-gitlab-launcher LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64 HOME=/root CUDA_VERSION=11.3.1 NVIDIA_REQUIRE_CUDA=<span class="hljs-string">&#x27;cuda&gt;=11.3 brand=tesla,driver&gt;=418,driver&lt;419 brand=tesla,driver&gt;=440,driver&lt;441 driver&gt;=450&#x27;</span> NVIDIA_DRIVER_CAPABILITIES=<span class="hljs-string">&#x27;&#x27;</span> KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1 PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin KUBERNETES_PORT_443_TCP_PORT=443 KUBERNETES_PORT_443_TCP_PROTO=tcp CUDNN_VERSION=8.2.0.53-1+cuda11.3 KUBERNETES_SERVICE_PORT_HTTPS=443 KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443 KUBERNETES_SERVICE_HOST=10.96.0.1 PWD=/simple_ml OMPI_MCA_orte_default_hostfile=/etc/mpi/hostfile OMPI_MCA_plm_rsh_agent=/etc/mpi/kubexec.sh NVIDIA_VISIBLE_DEVICES=<span class="hljs-string">&#x27;&#x27;</span> NCCL_VERSION=2.9.9-1+cuda11.3 TZ=Asia/Dubai LC_CTYPE=C.UTF-8 PYTHONUNBUFFERED=1 HOROVOD_GLOO_RENDEZVOUS_ADDR=10.244.3.228 HOROVOD_GLOO_RENDEZVOUS_PORT=56794 HOROVOD_CONTROLLER=gloo HOROVOD_CPU_OPERATIONS=gloo HOROVOD_GLOO_IFACE=eth0 NCCL_SOCKET_IFNAME=eth0 python main_with_horovod.py<br>[1]&lt;stderr&gt;:+ POD_NAME=sw-simple-ml-gitlab-worker-1<br>[1]&lt;stderr&gt;:+ <span class="hljs-built_in">shift</span><br>[1]&lt;stderr&gt;:+ /opt/kube/kubectl <span class="hljs-built_in">exec</span> sw-simple-ml-gitlab-worker-1 -- /bin/sh -c <span class="hljs-built_in">cd</span> /simple_ml &gt; /dev/null 2&gt;&amp;1 ; HOROVOD_HOSTNAME=sw-simple-ml-gitlab-worker-1 HOROVOD_RANK=1 HOROVOD_SIZE=2 HOROVOD_LOCAL_RANK=0 HOROVOD_LOCAL_SIZE=1 HOROVOD_CROSS_RANK=1 HOROVOD_CROSS_SIZE=2 LIBRARY_PATH=/usr/local/cuda/lib64/stubs KUBERNETES_SERVICE_PORT=443 KUBERNETES_PORT=tcp://10.96.0.1:443 HOSTNAME=sw-simple-ml-gitlab-launcher LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64 HOME=/root CUDA_VERSION=11.3.1 NVIDIA_REQUIRE_CUDA=<span class="hljs-string">&#x27;cuda&gt;=11.3 brand=tesla,driver&gt;=418,driver&lt;419 brand=tesla,driver&gt;=440,driver&lt;441 driver&gt;=450&#x27;</span> NVIDIA_DRIVER_CAPABILITIES=<span class="hljs-string">&#x27;&#x27;</span> KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1 PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin KUBERNETES_PORT_443_TCP_PORT=443 KUBERNETES_PORT_443_TCP_PROTO=tcp CUDNN_VERSION=8.2.0.53-1+cuda11.3 KUBERNETES_SERVICE_PORT_HTTPS=443 KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443 KUBERNETES_SERVICE_HOST=10.96.0.1 PWD=/simple_ml OMPI_MCA_orte_default_hostfile=/etc/mpi/hostfile OMPI_MCA_plm_rsh_agent=/etc/mpi/kubexec.sh NVIDIA_VISIBLE_DEVICES=<span class="hljs-string">&#x27;&#x27;</span> NCCL_VERSION=2.9.9-1+cuda11.3 TZ=Asia/Dubai LC_CTYPE=C.UTF-8 PYTHONUNBUFFERED=1 HOROVOD_GLOO_RENDEZVOUS_ADDR=10.244.3.228 HOROVOD_GLOO_RENDEZVOUS_PORT=56794 HOROVOD_CONTROLLER=gloo HOROVOD_CPU_OPERATIONS=gloo HOROVOD_GLOO_IFACE=eth0 NCCL_SOCKET_IFNAME=eth0 python main_with_horovod.py<br>[0]&lt;stdout&gt;:Training. Epoch 0, MSE loss: 1338.4868140452961, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 0, MSE loss: 1148.9670435080386, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 1, MSE loss: 935.5324933822116, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 1, MSE loss: 934.2259948853756, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 2, MSE loss: 654.0407885544738, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 2, MSE loss: 633.2420742589119, Worker: 1<br>[1]&lt;stdout&gt;:Training. Epoch 3, MSE loss: 599.6154769317578, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 3, MSE loss: 593.8755020723866, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 4, MSE loss: 574.4224909156511, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 4, MSE loss: 483.1180045366194, Worker: 0<br>[0]&lt;stdout&gt;:Training. Epoch 5, MSE loss: 501.9576651239583, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 5, MSE loss: 561.3756192270189, Worker: 1<br>[1]&lt;stdout&gt;:Training. Epoch 6, MSE loss: 543.3503851517656, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 6, MSE loss: 461.72367964229545, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 7, MSE loss: 599.5701360625471, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 7, MSE loss: 477.2382655836473, Worker: 0<br>[0]&lt;stdout&gt;:Training. Epoch 8, MSE loss: 467.4026207899954, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 8, MSE loss: 489.72919646231924, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 9, MSE loss: 496.021579158862, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 9, MSE loss: 466.33928261113863, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 10, MSE loss: 473.9692597730085, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 10, MSE loss: 484.8857977675169, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 11, MSE loss: 472.89639633833195, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 11, MSE loss: 468.5362197326799, Worker: 1<br>[1]&lt;stdout&gt;:Training. Epoch 12, MSE loss: 460.76999270017814, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 12, MSE loss: 416.7220215983699, Worker: 0<br>[0]&lt;stdout&gt;:Training. Epoch 13, MSE loss: 451.9702810886584, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 13, MSE loss: 439.8771825716403, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 14, MSE loss: 366.88131853180283, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 14, MSE loss: 470.20061697393044, Worker: 1<br>[1]&lt;stdout&gt;:Training. Epoch 15, MSE loss: 431.8841860381735, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 15, MSE loss: 395.79066620089884, Worker: 0<br>[0]&lt;stdout&gt;:Training. Epoch 16, MSE loss: 390.8923997512978, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 16, MSE loss: 425.90262653747106, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 17, MSE loss: 516.2323905151153, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 17, MSE loss: 355.790610972445, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 18, MSE loss: 501.96195440185153, Worker: 0<br>[1]&lt;stdout&gt;:Training. Epoch 18, MSE loss: 442.8678330586471, Worker: 1<br>[1]&lt;stdout&gt;:Training. Epoch 19, MSE loss: 445.24695194348794, Worker: 1<br>[0]&lt;stdout&gt;:Training. Epoch 19, MSE loss: 441.0054695299096, Worker: 0<br>[0]&lt;stdout&gt;:Testing. MSE loss: 219.68063354492188, Worker: 0<br>[1]&lt;stdout&gt;:Testing. MSE loss: 219.68063354492188, Worker: 1<br></code></pre></td></tr></table></figure></details><!-- empty line --><p>目前有个难受的点是，master需要等待worker安装完环境才能运行horovodrun命令，因此写了一个<strong>sleep 1m</strong>。后续应该可以用一些Pod之间的通信方式解决这个。</p><p>更新，可以通过readinessProbe解决。<a href="https://github.com/FFFFFaraway/MPI-Operator/blob/d180e938502e5af56ecc3105d4f904d9e14cb712/config/samples/training_job_cpu.yaml#L38">例子</a></p>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Horovod in Docker</title>
    <link href="/2022/06/19/horovod-in-docker/"/>
    <url>/2022/06/19/horovod-in-docker/</url>
    
    <content type="html"><![CDATA[<p>Horovod官方镜像安装，参考<a href="https://horovod.readthedocs.io/en/stable/docker_include.html">https://horovod.readthedocs.io/en/stable/docker_include.html</a>。</p><p>但由于官方镜像没有显示CUDA等版本，因此很可能会出现版本不兼容的情况，需要根据自己的GPU来build镜像。参考，<a href="https://github.com/determined-ai/horovod/blob/master/docs/docker.rst">https://github.com/determined-ai/horovod/blob/master/docs/docker.rst</a></p><h2 id="检查版本兼容"><a href="#检查版本兼容" class="headerlink" title="检查版本兼容"></a>检查版本兼容</h2><p>写Dockerfile中，需要注意各种库的版本。</p><p>base的版本我选择11.3的cuda，ubuntu平台</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nvidia/cuda:<span class="hljs-number">11.3</span>.<span class="hljs-number">1</span>-devel-ubuntu20.<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><p><strong>cuda的版本</strong></p><p>汇总参考，<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a></p><p>例如以下链接，对应的版本分别为</p><p><a href="https://developer.nvidia.com/compute/cudnn/secure/8.4.0/local/_installers/11.6/cudnn-local-repo-ubuntu2004-8.4.0.27/_1.0-1/_amd64.deb">https://developer.nvidia.com/compute/cudnn/secure/8.4.0/local\_installers/11.6/cudnn-local-repo-ubuntu2004-8.4.0.27\_1.0-1\_amd64.deb</a></p><p><a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.2.0.53/11.3/_04222021/Ubuntu20/_04-x64/libcudnn8/_8.2.0.53-1+cuda11.3/_amd64.deb">https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.2.0.53/11.3\_04222021/Ubuntu20\_04-x64/libcudnn8\_8.2.0.53-1+cuda11.3\_amd64.deb</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-number">8.4</span>.<span class="hljs-number">0.27</span>-<span class="hljs-number">1</span>+cuda11.<span class="hljs-number">6</span><br><span class="hljs-number">8.2</span>.<span class="hljs-number">0.53</span>-<span class="hljs-number">1</span>+cuda11.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>cudnn的版本</strong></p><p>汇总，参考，<a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p><p><strong>NCCL版本</strong></p><p>汇总，参考<a href="https://docs.nvidia.com/deeplearning/nccl/release-notes/index.html">https://docs.nvidia.com/deeplearning/nccl/release-notes/index.html</a></p><p>注意查看兼容性：</p><p><img src="/img/2.png"></p><p>最终选择cuda11.3，nccl2.9.9</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> CUDNN_VERSION=<span class="hljs-number">8.2</span>.<span class="hljs-number">0.53</span>-<span class="hljs-number">1</span>+cuda11.<span class="hljs-number">3</span><br><span class="hljs-keyword">ENV</span> NCCL_VERSION=<span class="hljs-number">2.9</span>.<span class="hljs-number">9</span>-<span class="hljs-number">1</span>+cuda11.<span class="hljs-number">3</span><br><span class="hljs-comment"># Set default shell to /bin/bash</span><br><span class="hljs-keyword">SHELL</span><span class="language-bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-cu&quot;</span>]</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update --allow-insecure-repositories &amp;&amp; apt-get install -y --allow-unauthenticated --allow-downgrades --allow-change-held-packages --no-install-recommends \</span><br><span class="language-bash">        build-essential \</span><br><span class="language-bash">        cmake \</span><br><span class="language-bash">        g++-9 \</span><br><span class="language-bash">        git \</span><br><span class="language-bash">        curl \</span><br><span class="language-bash">        vim \</span><br><span class="language-bash">        wget \</span><br><span class="language-bash">        ca-certificates \</span><br><span class="language-bash">        libcudnn8=<span class="hljs-variable">$&#123;CUDNN_VERSION&#125;</span> \</span><br><span class="language-bash">        libnccl2=<span class="hljs-variable">$&#123;NCCL_VERSION&#125;</span> \</span><br><span class="language-bash">        libnccl-dev=<span class="hljs-variable">$&#123;NCCL_VERSION&#125;</span> \</span><br><span class="language-bash">        libjpeg-dev \</span><br><span class="language-bash">        libpng-dev \</span><br><span class="language-bash">        python-is-python3 \</span><br><span class="language-bash">        python3-pip \</span><br><span class="language-bash">        python3-dev \</span><br><span class="language-bash">        python3-distutils \</span><br><span class="language-bash">        librdmacm1 \</span><br><span class="language-bash">        libibverbs1 \</span><br><span class="language-bash">        ibverbs-providers</span><br></code></pre></td></tr></table></figure><p>build过程中，可能会在tzdata的安装上hang，（猜测原因是无法接收输入）添加时区：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> TZ=Asia/Dubai<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone</span><br></code></pre></td></tr></table></figure><p>pip安装时，使用国内镜像，不然很慢，可以直接写到Dockerfile中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><p>安装Pytorch</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> PYTAGS=$(python -c <span class="hljs-string">&quot;from packaging import tags; tag = list(tags.sys_tags())[0]; print(f&#x27;&#123;tag.interpreter&#125;-&#123;tag.abi&#125;&#x27;)&quot;</span>) &amp;&amp; \</span><br><span class="language-bash">pip install https://download.pytorch.org/whl/cu113/torch-<span class="hljs-variable">$&#123;PYTORCH_VERSION&#125;</span>%2Bcu113-<span class="hljs-variable">$&#123;PYTAGS&#125;</span>-linux_x86_64.whl</span><br></code></pre></td></tr></table></figure><p>安装horovod</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> HOROVOD_GPU_OPERATIONS=NCCL \</span><br><span class="language-bash">    HOROVOD_WITH_PYTORCH=1 \</span><br><span class="language-bash">    HOROVOD_WITHOUT_MPI=1 \</span><br><span class="language-bash">         pip install --no-cache-dir horovod</span><br><span class="hljs-comment"># Install OpenSSH for MPI to communicate between containers</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y --no-install-recommends openssh-client openssh-server &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mkdir</span> -p /var/run/sshd</span><br><span class="hljs-comment"># Allow OpenSSH to talk to containers without asking for confirmation</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cat</span> /etc/ssh/ssh_config  grep -v StrictHostKeyChecking &gt; /etc/ssh/ssh_config.new &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    StrictHostKeyChecking no&quot;</span> &gt;&gt; /etc/ssh/ssh_config.new &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mv</span> /etc/ssh/ssh_config.new /etc/ssh/ssh_config</span><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>生成数据，train.csv，test.csv，保存到S3存储中</p><details>    <summary>生成数据的python代码</summary><!-- empty line --><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> s3_utils <span class="hljs-keyword">import</span> s3_save_pickle<br><span class="hljs-keyword">import</span> boto3<br><br>N = <span class="hljs-number">1000</span><br>ratio = <span class="hljs-number">0.8</span><br><br>a = np.random.uniform(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, N)<br>b = np.random.uniform(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, N)<br>noise = np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, N)<br>c = a + b + a * b + noise<br>data = np.stack([a, b, c], axis=-<span class="hljs-number">1</span>)<br><br>pos = <span class="hljs-built_in">int</span>(N * ratio)<br>train_set = data[:pos]<br>test_set = data[pos:]<br><br><span class="hljs-comment"># local save</span><br><span class="hljs-comment"># np.savetxt(&#x27;train.csv&#x27;, train_set, delimiter=&#x27;,&#x27;)</span><br><span class="hljs-comment"># np.savetxt(&#x27;test.csv&#x27;, test_set, delimiter=&#x27;,&#x27;)</span><br><br>session = boto3.session.Session()<br><br>s3_client = session.client(<br>    service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>    aws_access_key_id=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>    aws_secret_access_key=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>    endpoint_url=<span class="hljs-string">&#x27;http://10.105.222.7:24850&#x27;</span>,<br>)<br><br>s3_save_pickle(s3_client, train_set, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/train.pkl&#x27;</span>)<br>s3_save_pickle(s3_client, test_set, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/test.pkl&#x27;</span>)<br></code></pre></td></tr></table></figure></details><!-- empty line --><h1 id="单个CPU或者GPU测试"><a href="#单个CPU或者GPU测试" class="headerlink" title="单个CPU或者GPU测试"></a>单个CPU或者GPU测试</h1><details>    <summary>测试代码</summary><!-- empty line --><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> s3_utils <span class="hljs-keyword">import</span> s3_load_pickle, s3_save_file, s3_save_model<br><span class="hljs-keyword">import</span> boto3<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MSELoss<br><span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> Adam<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> TensorDataset, DataLoader<br><br>device = torch.device(<span class="hljs-string">&#x27;cuda:0&#x27;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><span class="hljs-comment"># define model</span><br>in_dim, hidden_dim, out_dim = <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span><br>hp = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hp.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>))<br><br>model = nn.Sequential(<br>    nn.Linear(in_dim, hidden_dim),<br>    nn.GELU(),<br>    nn.Dropout(hp[<span class="hljs-string">&quot;dropout&quot;</span>]),<br>    nn.Linear(hidden_dim, hidden_dim),<br>    nn.GELU(),<br>    nn.Dropout(hp[<span class="hljs-string">&quot;dropout&quot;</span>]),<br>    nn.Linear(hidden_dim, out_dim)<br>)<br>model.to(device)<br><br><span class="hljs-comment"># prepare data</span><br>session = boto3.session.Session()<br><br>s3_client = session.client(<br>    service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>    aws_access_key_id=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>    aws_secret_access_key=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>    endpoint_url=<span class="hljs-string">&#x27;http://10.105.222.7:24850&#x27;</span>,<br>)<br><br>train_tensor = torch.tensor(s3_load_pickle(s3_client, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/train.pkl&#x27;</span>), dtype=torch.<span class="hljs-built_in">float</span>)<br>test_tensor = torch.tensor(s3_load_pickle(s3_client, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/test.pkl&#x27;</span>), dtype=torch.<span class="hljs-built_in">float</span>)<br><br>train_dataset = TensorDataset(train_tensor[:, :-<span class="hljs-number">1</span>], train_tensor[:, -<span class="hljs-number">1</span>:])<br>test_dataset = TensorDataset(test_tensor[:, :-<span class="hljs-number">1</span>], test_tensor[:, -<span class="hljs-number">1</span>:])<br><br>train_dl = DataLoader(train_dataset)<br>test_dl = DataLoader(test_dataset)<br><br>opt = Adam(model.parameters(), lr=hp[<span class="hljs-string">&quot;lr&quot;</span>])<br>loss_fn = MSELoss()<br>epoch = <span class="hljs-number">20</span><br><br><span class="hljs-comment"># train and test</span><br>model.train()<br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    avg_loss = []<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> train_dl:<br>        x = x.to(device)<br>        y = y.to(device)<br>        opt.zero_grad()<br>        p = model(x)<br>        loss = loss_fn(p, y)<br>        loss.backward()<br>        opt.step()<br>        avg_loss.append(loss.item())<br>    avg_loss = <span class="hljs-built_in">sum</span>(avg_loss) / <span class="hljs-built_in">len</span>(avg_loss)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Training. Epoch <span class="hljs-subst">&#123;e&#125;</span>, MSE loss: <span class="hljs-subst">&#123;avg_loss&#125;</span>&#x27;</span>)<br><br>model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    avg_loss = []<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> test_dl:<br>        x = x.to(device)<br>        y = y.to(device)<br>        p = model(x)<br>        loss = loss_fn(p, y)<br>        avg_loss.append(loss.item())<br>    avg_loss = <span class="hljs-built_in">sum</span>(avg_loss) / <span class="hljs-built_in">len</span>(avg_loss)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Testing. MSE loss: <span class="hljs-subst">&#123;avg_loss&#125;</span>&#x27;</span>)<br><br>s3_save_model(s3_client, model, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/model_save/single/model.pt&#x27;</span>)<br>s3_save_file(s3_client, <span class="hljs-string">&#x27;config.pbtxt&#x27;</span>, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/model_save/single/config.pbtxt&#x27;</span>)<br></code></pre></td></tr></table></figure></details><!-- empty line --><h1 id="测试NCCL"><a href="#测试NCCL" class="headerlink" title="测试NCCL"></a>测试NCCL</h1><p>开启Debug模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NCCL_DEBUG=INFO<br></code></pre></td></tr></table></figure><p>查看目前ld能找到的lib，需要让ldconfig能找到nccl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ldconfig -p<br></code></pre></td></tr></table></figure><p>测试参考，nccl-test，<a href="https://github.com/NVIDIA/nccl-tests.git">https://github.com/NVIDIA/nccl-tests.git</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;https://github.com/NVIDIA/nccl-tests.git&gt;<br><span class="hljs-built_in">cd</span> nccl-tests<br>make<br>./build/all_reduce_perf -b 8 -e 256M -f 2 -g 4<br></code></pre></td></tr></table></figure><p>【注意】nccl-test在docker中运行时，需要添加以下参数shm-size，不然可能有bus error</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --shm-size 8G --<span class="hljs-built_in">rm</span> myhorovod bash<br></code></pre></td></tr></table></figure><h1 id="单机多GPU带horovod的python代码"><a href="#单机多GPU带horovod的python代码" class="headerlink" title="单机多GPU带horovod的python代码"></a>单机多GPU带horovod的python代码</h1><p>保证horovod在python中的写法没问题，以及horovod的安装没有问题</p><details>    <summary>测试代码</summary><!-- empty line -->    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MSELoss<br><span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> Adam<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> TensorDataset, DataLoader<br><span class="hljs-keyword">from</span> torch.utils.data.distributed <span class="hljs-keyword">import</span> DistributedSampler<br><span class="hljs-keyword">import</span> horovod.torch <span class="hljs-keyword">as</span> hvd<br><span class="hljs-keyword">from</span> s3_utils <span class="hljs-keyword">import</span> s3_load_pickle, s3_save_model, s3_save_file<br><span class="hljs-keyword">import</span> boto3<br><br><span class="hljs-comment"># prepare data</span><br>session = boto3.session.Session()<br><br>s3_client = session.client(<br>    service_name=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>    aws_access_key_id=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>    aws_secret_access_key=<span class="hljs-string">&#x27;XXXX&#x27;</span>,<br>    endpoint_url=<span class="hljs-string">&#x27;http://10.105.222.7:24850&#x27;</span>,<br>)<br><br>train_tensor = torch.tensor(s3_load_pickle(s3_client, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/train.pkl&#x27;</span>), dtype=torch.<span class="hljs-built_in">float</span>)<br>test_tensor = torch.tensor(s3_load_pickle(s3_client, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/test.pkl&#x27;</span>), dtype=torch.<span class="hljs-built_in">float</span>)<br><br>train_dataset = TensorDataset(train_tensor[:, :-<span class="hljs-number">1</span>], train_tensor[:, -<span class="hljs-number">1</span>:])<br>test_dataset = TensorDataset(test_tensor[:, :-<span class="hljs-number">1</span>], test_tensor[:, -<span class="hljs-number">1</span>:])<br><br><span class="hljs-comment">######################################################</span><br>hvd.init()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    torch.cuda.set_device(hvd.local_rank())<br>torch.set_num_threads(<span class="hljs-number">1</span>)<br><br>train_sampler = DistributedSampler(train_dataset, num_replicas=hvd.size(), rank=hvd.rank())<br>train_dl = DataLoader(train_dataset, sampler=train_sampler)<br><br>test_sampler = DistributedSampler(test_dataset, num_replicas=hvd.size(), rank=hvd.rank())<br>test_dl = DataLoader(test_dataset, sampler=test_sampler)<br><span class="hljs-comment">######################################################</span><br><br><span class="hljs-comment"># define model</span><br>in_dim, hidden_dim, out_dim = <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span><br>hp = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hp.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>))<br><br>model = nn.Sequential(<br>    nn.Linear(in_dim, hidden_dim),<br>    nn.GELU(),<br>    nn.Dropout(hp[<span class="hljs-string">&quot;dropout&quot;</span>]),<br>    nn.Linear(hidden_dim, hidden_dim),<br>    nn.GELU(),<br>    nn.Dropout(hp[<span class="hljs-string">&quot;dropout&quot;</span>]),<br>    nn.Linear(hidden_dim, out_dim)<br>)<br>model.cuda()<br><br><span class="hljs-comment">######################################################</span><br>opt = Adam(model.parameters(), lr=hp[<span class="hljs-string">&quot;lr&quot;</span>] * hvd.size())<br>opt = hvd.DistributedOptimizer(opt, named_parameters=model.named_parameters(), op=hvd.Average)<br>hvd.broadcast_parameters(model.state_dict(), root_rank=<span class="hljs-number">0</span>)<br>hvd.broadcast_optimizer_state(opt, root_rank=<span class="hljs-number">0</span>)<br><span class="hljs-comment">######################################################</span><br><br>loss_fn = MSELoss()<br>epoch = <span class="hljs-number">20</span><br><br><span class="hljs-comment"># train and test</span><br>model.train()<br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-comment">######################################################</span><br>    train_sampler.set_epoch(e)<br>    <span class="hljs-comment">######################################################</span><br>    avg_loss = []<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> train_dl:<br>        x = x.cuda()<br>        y = y.cuda()<br>        opt.zero_grad()<br>        p = model(x)<br>        loss = loss_fn(p, y)<br>        loss.backward()<br>        opt.step()<br>        avg_loss.append(loss.item())<br>    avg_loss = <span class="hljs-built_in">sum</span>(avg_loss) / <span class="hljs-built_in">len</span>(avg_loss)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Training. Epoch <span class="hljs-subst">&#123;e&#125;</span>, MSE loss: <span class="hljs-subst">&#123;avg_loss&#125;</span>, Worker: <span class="hljs-subst">&#123;hvd.rank()&#125;</span>&#x27;</span>)<br><br>model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    avg_loss = []<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> test_dl:<br>        x = x.cuda()<br>        y = y.cuda()<br>        p = model(x)<br>        loss = loss_fn(p, y)<br>        avg_loss.append(loss.item())<br>    avg_loss = <span class="hljs-built_in">sum</span>(avg_loss) / <span class="hljs-built_in">len</span>(avg_loss)<br>    <span class="hljs-comment">######################################################</span><br>    avg_loss = hvd.allreduce(torch.tensor(avg_loss)).item()<br>    <span class="hljs-comment">######################################################</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Testing. MSE loss: <span class="hljs-subst">&#123;avg_loss&#125;</span>, Worker: <span class="hljs-subst">&#123;hvd.rank()&#125;</span>&#x27;</span>)<br><br>s3_save_model(s3_client, model, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/model_save/1/model.pt&#x27;</span>)<br>s3_save_file(s3_client, <span class="hljs-string">&#x27;config.pbtxt&#x27;</span>, <span class="hljs-string">&#x27;songwei&#x27;</span>, <span class="hljs-string">&#x27;simple_ml/model_save/1/config.pbtxt&#x27;</span>)<br></code></pre></td></tr></table></figure></details><!-- empty line --><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">horovodrun -np 4 -H localhost:4 python main_with_horovod.py<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Triton Server——Model Serving</title>
    <link href="/2022/06/19/triton-server/"/>
    <url>/2022/06/19/triton-server/</url>
    
    <content type="html"><![CDATA[<p>Triton Server官方文档可以参考，<a href="https://github.com/triton-inference-server/server/blob/main/docs/quickstart.md">https://github.com/triton-inference-server/server/blob/main/docs/quickstart.md</a></p><p>其支持的模型种类，参考，<a href="https://github.com/triton-inference-server/server/blob/main/docs/model_repository.md#model-files">https://github.com/triton-inference-server/server/blob/main/docs/model_repository.md#model-files</a></p><p>triton要求使用torchscript（可以认为是tensorflow v1），而非eager，参考，<a href="https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html">https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html</a>，因此在存储模型的时候要注意一下</p><p>每个模型需要一个配置文件来描述其输入输出：配置文件config.pbtxt的参考文档，<a href="https://github.com/triton-inference-server/server/blob/main/docs/model_configuration.md">https://github.com/triton-inference-server/server/blob/main/docs/model_configuration.md</a></p><p>config.pbtxt的一个简单示例：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;simple&quot;</span><br><span class="hljs-symbol">platform:</span> <span class="hljs-string">&quot;pytorch_libtorch&quot;</span><br><span class="hljs-symbol">max_batch_size:</span> <span class="hljs-number">4</span><br>input [<br>  <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    name:</span> <span class="hljs-string">&quot;input&quot;</span><br><span class="hljs-symbol">    data_type:</span> TYPE_FP32<br><span class="hljs-symbol">    dims:</span> [ <span class="hljs-number">2</span> ]<br>  <span class="hljs-punctuation">&#125;</span><br>]<br>output [<br>  <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    name:</span> <span class="hljs-string">&quot;OUTPUT__0&quot;</span><br><span class="hljs-symbol">    data_type:</span> TYPE_FP32<br><span class="hljs-symbol">    dims:</span> [ <span class="hljs-number">1</span> ]<br>  <span class="hljs-punctuation">&#125;</span><br>]<br></code></pre></td></tr></table></figure><p>模型结构假设为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">in_dim, hidden_dim, out_dim = <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span><br>hp = json<span class="hljs-selector-class">.load</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hp.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>))<br><br>model = nn<span class="hljs-selector-class">.Sequential</span>(<br>    nn<span class="hljs-selector-class">.Linear</span>(in_dim, hidden_dim),<br>    nn<span class="hljs-selector-class">.GELU</span>(),<br>    nn<span class="hljs-selector-class">.Dropout</span>(hp<span class="hljs-selector-attr">[<span class="hljs-string">&quot;dropout&quot;</span>]</span>),<br>    nn<span class="hljs-selector-class">.Linear</span>(hidden_dim, hidden_dim),<br>    nn<span class="hljs-selector-class">.GELU</span>(),<br>    nn<span class="hljs-selector-class">.Dropout</span>(hp<span class="hljs-selector-attr">[<span class="hljs-string">&quot;dropout&quot;</span>]</span>),<br>    nn<span class="hljs-selector-class">.Linear</span>(hidden_dim, out_dim)<br>)<br></code></pre></td></tr></table></figure><p>训练好模型之后，通过python代码将模型与配置文件都存储到S3中</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">session = boto3.session.Session()<br><br>s3_client = session.client(<br>    <span class="hljs-attribute">service_name</span>=<span class="hljs-string">&#x27;s3&#x27;</span>,<br>    <span class="hljs-attribute">aws_access_key_id</span>=<span class="hljs-string">&#x27;XXX&#x27;</span>,<br>    <span class="hljs-attribute">aws_secret_access_key</span>=<span class="hljs-string">&#x27;XXX&#x27;</span>,<br>    <span class="hljs-attribute">endpoint_url</span>=<span class="hljs-string">&#x27;&lt;http://10.105.222.7:24850&gt;&#x27;</span>,<br>)<br><span class="hljs-built_in">print</span>(s3_client.list_buckets())<br><br>buffer = io.BytesIO()<br>model_scripted = script(model)<br>torch.jit.save(model_scripted, buffer)<br>s3_client.put_object(<span class="hljs-attribute">Bucket</span>=<span class="hljs-string">&quot;mlflow-artifact&quot;</span>, <span class="hljs-attribute">Key</span>=<span class="hljs-string">&#x27;manual/test/model_repository/simple/1/model.pt&#x27;</span>,<br>                     <span class="hljs-attribute">Body</span>=buffer.getvalue())<br>with open(<span class="hljs-string">&#x27;config.pbtxt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) as f:<br>    s3_client.put_object(<span class="hljs-attribute">Bucket</span>=<span class="hljs-string">&quot;mlflow-artifact&quot;</span>, <span class="hljs-attribute">Key</span>=<span class="hljs-string">&#x27;manual/test/model_repository/simple/config.pbtxt&#x27;</span>,<br>                         <span class="hljs-attribute">Body</span>=f.read())<br></code></pre></td></tr></table></figure><p>之后通过triton server连接S3访问模型文件夹，先试试docker</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --rm -p <span class="hljs-number">8000</span>:<span class="hljs-number">8000</span> -p <span class="hljs-number">8001</span>:<span class="hljs-number">8001</span> -p <span class="hljs-number">8002</span>:<span class="hljs-number">8002</span> \\<br>-e AWS_ACCESS_KEY_ID=XXX \\<br>-e AWS_SECRET_ACCESS_KEY=XXX \\<br>nvcr.io<span class="hljs-regexp">/nvidia/</span>tritonserver:<span class="hljs-number">22.05</span>-py3 tritonserver \\<br>--model-repository=s3:<span class="hljs-regexp">//</span>http:<span class="hljs-regexp">//</span><span class="hljs-number">10.105</span>.<span class="hljs-number">222.7</span>:<span class="hljs-number">24850</span><span class="hljs-regexp">/mlflow-artifact/m</span>anual<span class="hljs-regexp">/test/m</span>odel_repository<br></code></pre></td></tr></table></figure><p>Docker上没问题后，使用seldon core部署triton server到k8s集群中：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> machinelearning.seldon.io/v1<br><span class="hljs-symbol">kind:</span> SeldonDeployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> triton-simple-model<br><span class="hljs-symbol">  namespace:</span> seldon<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  name:</span> triton-simple<br><span class="hljs-symbol">  predictors:</span><br>  - graph:<br><span class="hljs-symbol">      implementation:</span> TRITON_SERVER<br><span class="hljs-symbol">      modelUri:</span> s3:<span class="hljs-comment">//mlflow-artifact/manual/test/model_repository</span><br><span class="hljs-symbol">      name:</span> classifier<br><span class="hljs-symbol">    name:</span> default<br><span class="hljs-symbol">    replicas:</span> <span class="hljs-number">1</span><br><span class="hljs-meta"># 【这个很重要，必须要加，对应了values中的镜像】</span><br><span class="hljs-symbol">  protocol:</span> v2<br></code></pre></td></tr></table></figure><p>部署完成后，验证</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">curl triton-simple-model-<span class="hljs-keyword">default</span>-classifier:<span class="hljs-number">9000</span><span class="hljs-regexp">/v2/m</span>odels<span class="hljs-regexp">/simple/</span>config<br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;simple&quot;</span></span>,<span class="hljs-string">&quot;platform&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;pytorch_libtorch&quot;</span></span>,<span class="hljs-string">&quot;backend&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;pytorch&quot;</span></span>,<span class="hljs-string">&quot;version_policy&quot;</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-string">&quot;latest&quot;</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-string">&quot;num_versions&quot;</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>&#125;&#125;,<span class="hljs-string">&quot;max_batch_size&quot;</span><span class="hljs-symbol">:</span><span class="hljs-number">4</span>,<span class="hljs-string">&quot;input&quot;</span><span class="hljs-symbol">:</span>[&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;input&quot;</span></span>,<span class="hljs-string">&quot;data_type&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;TYPE_FP32&quot;</span></span>,<span class="hljs-string">&quot;format&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;FORMAT_NONE&quot;</span></span>,<span class="hljs-string">&quot;dims&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-number">2</span>],<span class="hljs-string">&quot;is_shape_tensor&quot;</span><span class="hljs-symbol">:false</span>,<span class="hljs-string">&quot;allow_ragged_batch&quot;</span><span class="hljs-symbol">:false</span>,<span class="hljs-string">&quot;optional&quot;</span><span class="hljs-symbol">:false</span>&#125;],<span class="hljs-string">&quot;output&quot;</span><span class="hljs-symbol">:</span>[&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;OUTPUT__0&quot;</span></span>,<span class="hljs-string">&quot;data_type&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;TYPE_FP32&quot;</span></span>,<span class="hljs-string">&quot;dims&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;label_filename&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;&quot;</span></span>,<span class="hljs-string">&quot;is_shape_tensor&quot;</span><span class="hljs-symbol">:false</span>&#125;],<span class="hljs-string">&quot;batch_input&quot;</span><span class="hljs-symbol">:[]</span>,<span class="hljs-string">&quot;batch_output&quot;</span><span class="hljs-symbol">:[]</span>,<span class="hljs-string">&quot;optimization&quot;</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-string">&quot;priority&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;PRIORITY_DEFAULT&quot;</span></span>,<span class="hljs-string">&quot;input_pinned_memory&quot;</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-string">&quot;enable&quot;</span><span class="hljs-symbol">:true</span>&#125;,<span class="hljs-string">&quot;output_pinned_memory&quot;</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-string">&quot;enable&quot;</span><span class="hljs-symbol">:true</span>&#125;,<span class="hljs-string">&quot;gather_kernel_buffer_threshold&quot;</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span>,<span class="hljs-string">&quot;eager_batching&quot;</span><span class="hljs-symbol">:false</span>&#125;,<span class="hljs-string">&quot;instance_group&quot;</span><span class="hljs-symbol">:</span>[&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;simple&quot;</span></span>,<span class="hljs-string">&quot;kind&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;KIND_CPU&quot;</span></span>,<span class="hljs-string">&quot;count&quot;</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>,<span class="hljs-string">&quot;gpus&quot;</span><span class="hljs-symbol">:[]</span>,<span class="hljs-string">&quot;secondary_devices&quot;</span><span class="hljs-symbol">:[]</span>,<span class="hljs-string">&quot;profile&quot;</span><span class="hljs-symbol">:[]</span>,<span class="hljs-string">&quot;passive&quot;</span><span class="hljs-symbol">:false</span>,<span class="hljs-string">&quot;host_policy&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;&quot;</span></span>&#125;],<span class="hljs-string">&quot;default_model_filename&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;model.pt&quot;</span></span>,<span class="hljs-string">&quot;cc_model_filenames&quot;</span><span class="hljs-symbol">:</span>&#123;&#125;,<span class="hljs-string">&quot;metric_tags&quot;</span><span class="hljs-symbol">:</span>&#123;&#125;,<span class="hljs-string">&quot;parameters&quot;</span><span class="hljs-symbol">:</span>&#123;&#125;,<span class="hljs-string">&quot;model_warmup&quot;</span><span class="hljs-symbol">:[]</span>&#125;<br></code></pre></td></tr></table></figure><p>验证模型推断</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">curl <span class="hljs-number">10.111</span><span class="hljs-number">.154</span><span class="hljs-number">.79</span>:<span class="hljs-number">9000</span>/v2/models/<span class="hljs-built_in">simple</span>/infer -d \\<br>&#x27;&#123;<span class="hljs-string">&quot;inputs&quot;</span>:[&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;input&quot;</span>,<span class="hljs-string">&quot;datatype&quot;</span>:<span class="hljs-string">&quot;FP32&quot;</span>,<span class="hljs-string">&quot;shape&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<span class="hljs-string">&quot;data&quot;</span>:[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]&#125;]&#125;&#x27;<br></code></pre></td></tr></table></figure><p>模型输出为</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<span class="hljs-string">&quot;model_name&quot;</span>:<span class="hljs-string">&quot;simple&quot;</span>,<span class="hljs-string">&quot;model_version&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;outputs&quot;</span>:[&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;OUTPUT__0&quot;</span>,<span class="hljs-string">&quot;datatype&quot;</span>:<span class="hljs-string">&quot;FP32&quot;</span>,<span class="hljs-string">&quot;shape&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<span class="hljs-string">&quot;data&quot;</span>:[<span class="hljs-number">15.969637870788575</span>]&#125;]&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
